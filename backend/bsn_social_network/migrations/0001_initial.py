# Generated by Django 5.0.2 on 2025-07-16 09:27

import bsn_social_network.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('wallet_address', models.CharField(blank=True, max_length=255, null=True)),
                ('avatar_url', models.URLField(blank=True, help_text="URL to user's profile picture", null=True)),
                ('cover_url', models.URLField(blank=True, help_text="URL to user's cover/banner image", null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_alpha_user', models.BooleanField(default=False)),
                ('alpha_access_granted_at', models.DateTimeField(blank=True, null=True)),
                ('alpha_access_reason', models.CharField(blank=True, choices=[('referral', 'Referral Validation'), ('investment', 'ICO Investment'), ('influencer', 'Influencer Status'), ('internal', 'Internal Team'), ('manual', 'Manual Grant')], max_length=50, null=True)),
                ('referral_count_for_alpha', models.IntegerField(default=0)),
                ('referral_validation_date', models.DateTimeField(blank=True, null=True)),
                ('ico_investment_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('investment_validation_date', models.DateTimeField(blank=True, null=True)),
                ('influencer_category', models.CharField(blank=True, choices=[('crypto_streamer', 'Crypto Streamer'), ('influencer', 'Influencer'), ('content_creator', 'Content Creator'), ('youtuber', 'YouTuber'), ('twitter_influencer', 'Twitter Influencer')], max_length=50, null=True)),
                ('follower_count', models.IntegerField(default=0)),
                ('social_media_links', models.JSONField(blank=True, default=dict)),
                ('is_suspended', models.BooleanField(default=False)),
                ('suspended_until', models.DateTimeField(blank=True, null=True)),
                ('suspension_reason', models.TextField(blank=True, null=True)),
                ('warning_count', models.IntegerField(default=0)),
                ('last_warning_at', models.DateTimeField(blank=True, null=True)),
                ('auto_moderated', models.BooleanField(default=False)),
                ('moderation_score', models.FloatField(default=0.0)),
                ('alpha_access_granted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='alpha_access_granted', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('suspended_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='suspended_users', to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('criteria', models.JSONField()),
                ('reward', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'achievement',
            },
        ),
        migrations.CreateModel(
            name='AchievementTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('criteria', models.JSONField()),
                ('points', models.IntegerField(default=0)),
                ('token_reward', models.DecimalField(decimal_places=8, default=0, max_digits=18)),
                ('badge_image_url', models.URLField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'achievement_template',
            },
        ),
        migrations.CreateModel(
            name='Hashtag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('posts_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-posts_count', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ICOConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=100, unique=True)),
                ('value', models.TextField()),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'ico_configuration',
            },
        ),
        migrations.CreateModel(
            name='ProfileSettings',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='profile_settings', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('is_public', models.BooleanField(default=True)),
                ('notification_preferences', models.JSONField(default=dict)),
                ('language', models.CharField(default='en', max_length=10)),
            ],
            options={
                'db_table': 'profile_settings',
            },
        ),
        migrations.CreateModel(
            name='AdminLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('create', 'Create'), ('update', 'Update'), ('delete', 'Delete'), ('suspend', 'Suspend'), ('unsuspend', 'Unsuspend'), ('other', 'Other')], max_length=10)),
                ('entity_type', models.CharField(max_length=50)),
                ('entity_id', models.IntegerField()),
                ('description', models.TextField()),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('admin', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='admin_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'admin_log',
            },
        ),
        migrations.CreateModel(
            name='AutoModerationRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('rule_type', models.CharField(choices=[('keyword_filter', 'Keyword Filter'), ('spam_detection', 'Spam Detection'), ('toxicity_score', 'Toxicity Score'), ('repetitive_content', 'Repetitive Content'), ('rate_limiting', 'Rate Limiting')], max_length=20)),
                ('content_type', models.CharField(max_length=20)),
                ('conditions', models.JSONField()),
                ('action', models.CharField(choices=[('flag', 'Flag for Review'), ('hide', 'Auto Hide'), ('warn', 'Send Warning'), ('suspend', 'Suspend User'), ('delete', 'Auto Delete')], max_length=20)),
                ('threshold', models.FloatField(default=0.5)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'auto_moderation_rule',
            },
        ),
        migrations.CreateModel(
            name='BlockedUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('blocked_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocked_by', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocked_users', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'blocked_user',
            },
        ),
        migrations.CreateModel(
            name='Boost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('boost_type', models.CharField(choices=[('post', 'Post Creation'), ('comment', 'Comment Creation'), ('like', 'Like Given'), ('share', 'Content Share'), ('login', 'Daily Login'), ('referral', 'Referral Success')], max_length=20)),
                ('multiplier', models.DecimalField(decimal_places=2, max_digits=5)),
                ('expires_at', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='boosts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'boost',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Chat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('type', models.CharField(choices=[('direct', 'Direct'), ('group', 'Group')], default='direct', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_chats', to=settings.AUTH_USER_MODEL)),
                ('participants', models.ManyToManyField(related_name='chats', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'chat',
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('media_url', models.URLField(blank=True, null=True)),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('chat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='bsn_social_network.chat')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'chat_message',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_reported', models.BooleanField(default=False)),
                ('report_count', models.IntegerField(default=0)),
                ('is_hidden', models.BooleanField(default=False)),
                ('hidden_at', models.DateTimeField(blank=True, null=True)),
                ('hidden_reason', models.TextField(blank=True, null=True)),
                ('auto_moderated', models.BooleanField(default=False)),
                ('moderation_score', models.FloatField(default=0.0)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
                ('hidden_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='hidden_comments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'comment',
            },
        ),
        migrations.CreateModel(
            name='ContentReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_type', models.CharField(max_length=20)),
                ('content_id', models.IntegerField()),
                ('report_type', models.CharField(choices=[('spam', 'Spam'), ('inappropriate', 'Inappropriate Content'), ('harassment', 'Harassment'), ('violence', 'Violence'), ('copyright', 'Copyright Violation'), ('fake_news', 'Fake News'), ('other', 'Other')], max_length=20)),
                ('reason', models.TextField()),
                ('evidence', models.JSONField(blank=True, default=dict)),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('under_review', 'Under Review'), ('resolved', 'Resolved'), ('dismissed', 'Dismissed'), ('escalated', 'Escalated')], default='pending', max_length=20),),
                ('moderator_notes', models.TextField(blank=True, null=True)),
                ('resolution_action', models.CharField(blank=True, max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('assigned_moderator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_reports', to=settings.AUTH_USER_MODEL)),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports_filed', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'content_report',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('participants', models.ManyToManyField(related_name='conversations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'conversation',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='ConversationParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('left_at', models.DateTimeField(blank=True, null=True)),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants_info', to='bsn_social_network.conversation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conversation_participations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'conversation_participant',
            },
        ),
        migrations.CreateModel(
            name='DAO',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('governance_token', models.CharField(blank=True, max_length=255, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('suspended', 'Suspended'), ('archived', 'Archived')], default='active', max_length=10),),
                ('rules', models.JSONField(default=dict)),
                ('logo_url', models.URLField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_daos', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'dao',
            },
        ),
        migrations.CreateModel(
            name='DAOMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('member', 'Member'), ('contributor', 'Contributor'), ('moderator', 'Moderator'), ('admin', 'Admin')], default='member', max_length=15),),
                ('voting_power', models.DecimalField(decimal_places=2, default=1.0, max_digits=10),),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('dao', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='bsn_social_network.dao')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dao_memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'dao_membership',
            },
        ),
        migrations.CreateModel(
            name='DemoToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token_name', models.CharField(max_length=50)),
                ('token_symbol', models.CharField(max_length=10)),
                ('total_supply', models.DecimalField(decimal_places=8, max_digits=20)),
                ('demo_balance', models.DecimalField(decimal_places=8, max_digits=20)),
                ('token_color', models.CharField(default='#3B82F6', max_length=7)),
                ('token_logo_url', models.URLField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('influencer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DemoTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=8, max_digits=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('demo_token', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bsn_social_network.demotoken')),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='demo_sent_transactions', to=settings.AUTH_USER_MODEL)),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='demo_received_transactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'demo_transaction',
            },
        ),
        migrations.CreateModel(
            name='EventLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(max_length=100)),
                ('level', models.CharField(choices=[('debug', 'Debug'), ('info', 'Info'), ('warning', 'Warning'), ('error', 'Error'), ('critical', 'Critical')], default='info', max_length=10),),
                ('message', models.TextField()),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='event_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'event_log',
            },
        ),
        migrations.CreateModel(
            name='FollowRelationship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('friend', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'follow_relationship',
            },
        ),
        migrations.CreateModel(
            name='Friendship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('declined', 'Declined')], default='pending', max_length=10),),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friendship_received', to=settings.AUTH_USER_MODEL)),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friendship_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'friendship',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('privacy', models.CharField(choices=[('public', 'Public'), ('private', 'Private')], default='public', max_length=10),),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_groups', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'group',
            },
        ),
        migrations.CreateModel(
            name='GroupMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('member', 'Member'), ('admin', 'Admin')], default='member', max_length=10),),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='bsn_social_network.group')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'group_membership',
            },
        ),
        migrations.CreateModel(
            name='ICOTokenReservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount_usd', models.DecimalField(decimal_places=2, max_digits=10)),
                ('tokens_reserved', models.DecimalField(decimal_places=8, max_digits=18)),
                ('payment_method', models.CharField(choices=[('ethereum', 'Ethereum'), ('polygon', 'Polygon'), ('bsc', 'Binance Smart Chain'), ('solana', 'Solana')], max_length=10),),
                ('payment_address', models.CharField(max_length=255)),
                ('transaction_hash', models.CharField(blank=True, max_length=66, null=True, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('failed', 'Failed')], default='pending', max_length=10),),
                ('payment_amount', models.DecimalField(blank=True, decimal_places=8, max_digits=18, null=True)),
                ('payment_currency', models.CharField(blank=True, max_length=10, null=True)),
                ('exchange_rate', models.DecimalField(blank=True, decimal_places=8, max_digits=18, null=True)),
                ('confirmation_blocks', models.IntegerField(default=0)),
                ('required_confirmations', models.IntegerField(default=12)),
                ('expires_at', models.DateTimeField()),
                ('confirmed_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ico_reservations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'ico_token_reservation',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Invite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20, unique=True)),
                ('invitee_email', models.EmailField(max_length=254)),
                ('is_used', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('used_at', models.DateTimeField(blank=True, null=True)),
                ('inviter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_invites', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'invite',
            },
        ),
        migrations.CreateModel(
            name='InviteReward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reward_amount', models.DecimalField(decimal_places=8, max_digits=18)),
                ('is_claimed', models.BooleanField(default=False)),
                ('claimed_at', models.DateTimeField(blank=True, null=True)),
                ('invite', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='reward', to='bsn_social_network.invite')),
                ('inviter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invite_rewards', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'invite_reward',
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('message_type', models.CharField(choices=[('text', 'Text'), ('image', 'Image'), ('video', 'Video'), ('audio', 'Audio'), ('file', 'File'), ('voice', 'Voice'), ('location', 'Location')], default='text', max_length=20),),
                ('voice_file', models.FileField(blank=True, null=True, upload_to='voice_messages/')),
                ('voice_duration', models.IntegerField(blank=True, null=True)),
                ('voice_waveform', models.JSONField(blank=True, null=True)),
                ('file', models.FileField(blank=True, null=True, upload_to='message_files/')),
                ('file_name', models.CharField(blank=True, max_length=255)),
                ('file_size', models.IntegerField(blank=True, null=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('location_name', models.CharField(blank=True, max_length=255)),
                ('is_edited', models.BooleanField(default=False)),
                ('edited_at', models.DateTimeField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('conversation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='bsn_social_network.conversation')),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='group_messages', to='bsn_social_network.group')),
                ('receiver', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='received_messages', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'message',
            },
        ),
        migrations.CreateModel(
            name='MessageReaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reaction_type', models.CharField(choices=[('like', '👍'), ('love', '❤️'), ('laugh', '😂'), ('wow', '😮'), ('sad', '😢'), ('angry', '😠')], max_length=20),),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reactions', to='bsn_social_network.message')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='message_reactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'message_reactions',
            },
        ),
        migrations.CreateModel(
            name='MessageRead',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('read_at', models.DateTimeField(auto_now_add=True)),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='read_receipts', to='bsn_social_network.message')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='read_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'message_read',
            },
        ),
        migrations.CreateModel(
            name='MiningProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mining_power', models.DecimalField(decimal_places=2, default=1.0, max_digits=10),),
                ('last_claim_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('accumulated_tokens', models.DecimalField(decimal_places=8, default=0, max_digits=18),),
                ('total_mined', models.DecimalField(decimal_places=8, default=0, max_digits=18),),
                ('streak_days', models.IntegerField(default=0)),
                ('last_heartbeat', models.DateTimeField(blank=True, null=True)),
                ('last_activity_at', models.DateTimeField(blank=True, null=True)),
                ('last_inactive_check', models.DateTimeField(blank=True, null=True)),
                ('is_mining', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mining_progress', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'mining_progress',
            },
        ),
        migrations.CreateModel(
            name='ModerationAuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('report_created', 'Report Created'), ('report_assigned', 'Report Assigned'), ('report_resolved', 'Report Resolved'), ('content_hidden', 'Content Hidden'), ('content_deleted', 'Content Deleted'), ('user_warned', 'User Warned'), ('user_suspended', 'User Suspended'), ('auto_moderation', 'Auto Moderation')], max_length=20),),
                ('content_type', models.CharField(max_length=20),),
                ('content_id', models.IntegerField()),
                ('details', models.JSONField(default=dict)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('moderator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='moderation_actions', to=settings.AUTH_USER_MODEL)),
                ('target_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='moderation_audit_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'moderation_audit_log',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ModeratorRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('junior_moderator', 'Junior Moderator'), ('senior_moderator', 'Senior Moderator'), ('admin_moderator', 'Admin Moderator'), ('super_admin', 'Super Admin')], max_length=20),),
                ('permissions', models.JSONField(default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('assigned_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='moderator_assignments', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='moderator_role', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'moderator_role',
            },
        ),
        migrations.CreateModel(
            name='NFT',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token_id', models.CharField(max_length=64, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('nft_type', models.CharField(choices=[('image', 'Image'), ('audio', 'Audio'), ('video', 'Video'), ('document', 'Document'), ('other', 'Other')], default='image', max_length=10),),
                ('media_url', models.URLField()),
                ('metadata', models.JSONField(default=dict)),
                ('rarity', models.CharField(choices=[('common', 'Common'), ('uncommon', 'Uncommon'), ('rare', 'Rare'), ('epic', 'Epic'), ('legendary', 'Legendary'), ('mythic', 'Mythic')], default='common', max_length=10),),
                ('is_locked', models.BooleanField(default=False)),
                ('transaction_hash', models.CharField(blank=True, max_length=64, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_nfts', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_nfts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'nft',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('like', 'Like'), ('comment', 'Comment'), ('friend_request', 'Friend Request'), ('group_invite', 'Group Invite'), ('message', 'Message')], max_length=20),),
                ('reference_id', models.IntegerField()),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'notification',
            },
        ),
        migrations.CreateModel(
            name='NotificationSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('likes', models.BooleanField(default=True)),
                ('comments', models.BooleanField(default=True)),
                ('friend_requests', models.BooleanField(default=True)),
                ('messages', models.BooleanField(default=True)),
                ('group_invites', models.BooleanField(default=True)),
                ('system_notifications', models.BooleanField(default=True)),
                ('token_transactions', models.BooleanField(default=True)),
                ('mining_rewards', models.BooleanField(default=True)),
                ('governance_alerts', models.BooleanField(default=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='notification_settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'notification_settings',
            },
        ),
        migrations.CreateModel(
            name='PhotoAlbum',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('privacy', models.CharField(choices=[('public', 'Öffentlich'), ('friends', 'Nur Freunde'), ('private', 'Privat')], default='public', max_length=10),),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photo_albums', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'photo_album',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='user_photos/')),
                ('caption', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to=settings.AUTH_USER_MODEL)),
                ('album', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='bsn_social_network.photoalbum')),
            ],
            options={
                'db_table': 'photo',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('media_url', models.URLField(blank=True, null=True)),
                ('media_type', models.CharField(blank=True, choices=[('image', 'Image'), ('video', 'Video'), ('audio', 'Audio'), ('document', 'Document')], max_length=20, null=True),),
                ('hashtags', models.JSONField(blank=True, default=list)),
                ('shares_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_reported', models.BooleanField(default=False)),
                ('report_count', models.IntegerField(default=0)),
                ('is_hidden', models.BooleanField(default=False)),
                ('hidden_at', models.DateTimeField(blank=True, null=True)),
                ('hidden_reason', models.TextField(blank=True, null=True)),
                ('auto_moderated', models.BooleanField(default=False)),
                ('moderation_score', models.FloatField(default=0.0)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='bsn_social_network.group')),
                ('hidden_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='hidden_posts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'post',
            },
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='bsn_social_network.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='bsn_social_network.post')),
            ],
            options={
                'db_table': 'like',
            },
        ),
        migrations.AddField(
            model_name='comment',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='bsn_social_network.post'),
        ),
        migrations.CreateModel(
            name='Bookmark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookmarks', to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookmarked_by', to='bsn_social_network.post')),
            ],
            options={
                'db_table': 'bookmark',
            },
        ),
        migrations.CreateModel(
            name='PostHashtag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('hashtag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hashtag_posts', to='bsn_social_network.hashtag')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_hashtag_links', to='bsn_social_network.post')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Proposal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('active', 'Active'), ('passed', 'Passed'), ('rejected', 'Rejected'), ('executed', 'Executed'), ('cancelled', 'Cancelled')], default='draft', max_length=10),),
                ('execution_script', models.JSONField(blank=True, default=dict)),
                ('quorum', models.IntegerField(default=0)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_proposals', to=settings.AUTH_USER_MODEL)),
                ('dao', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='proposals', to='bsn_social_network.dao')),
            ],
            options={
                'db_table': 'proposal',
            },
        ),
        migrations.CreateModel(
            name='Referral',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reward_claimed', models.BooleanField(default=False)),
                ('reward_amount', models.DecimalField(decimal_places=8, default=0, max_digits=18)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('rewarded_at', models.DateTimeField(blank=True, null=True)),
                ('referred', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='referred_by', to=settings.AUTH_USER_MODEL)),
                ('referrer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='referred_users', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'referral',
            },
        ),
        migrations.CreateModel(
            name='SmartContract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('contract_type', models.CharField(choices=[('token', 'Token'), ('nft', 'NFT'), ('marketplace', 'Marketplace'), ('governance', 'Governance'), ('other', 'Other')], max_length=15),),
                ('address', models.CharField(max_length=255)),
                ('network', models.CharField(max_length=50)),
                ('abi', models.JSONField()),
                ('bytecode', models.TextField(blank=True, null=True)),
                ('source_code', models.TextField(blank=True, null=True)),
                ('transaction_hash', models.CharField(blank=True, max_length=66, null=True)),
                ('deployed_at', models.DateTimeField(auto_now_add=True)),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='deployed_contracts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'smart_contract',
            },
        ),
        migrations.CreateModel(
            name='Staking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=8, max_digits=18)),
                ('status', models.CharField(choices=[('active', 'Active'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='active', max_length=10),),
                ('staking_period', models.IntegerField()),
                ('apy_rate', models.DecimalField(decimal_places=2, max_digits=6)),
                ('rewards_earned', models.DecimalField(decimal_places=8, default=0, max_digits=18)),
                ('start_date', models.DateTimeField(auto_now_add=True)),
                ('end_date', models.DateTimeField()),
                ('last_reward_claim', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stakings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'staking',
            },
        ),
        migrations.CreateModel(
            name='Story',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('media_url', models.URLField(blank=True, null=True)),
                ('type', models.CharField(choices=[('image', 'Image'), ('video', 'Video'), ('text', 'Text'), ('ai', 'AI'), ('collage', 'Collage'), ('music', 'Music'), ('poll', 'Poll'), ('sticker', 'Sticker')], default='image', max_length=20),),
                ('caption', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('privacy', models.CharField(choices=[('public', 'Öffentlich'), ('friends', 'Freunde'), ('custom', 'Benutzerdefiniert')], default='friends', max_length=20),),
                ('tags', models.JSONField(blank=True, default=list)),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('is_highlight', models.BooleanField(default=False)),
                ('ai_data', models.JSONField(blank=True, null=True)),
                ('is_reported', models.BooleanField(default=False)),
                ('report_reason', models.TextField(blank=True, null=True)),
                ('report_count', models.IntegerField(default=0)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stories', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'story',
            },
        ),
        migrations.CreateModel(
            name='StoryHighlight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('stories', models.ManyToManyField(related_name='highlights', to='bsn_social_network.story')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='story_highlights', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StoryMusic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('artist', models.CharField(blank=True, max_length=255, null=True)),
                ('url', models.URLField()),
                ('start_time', models.IntegerField(default=0)),
                ('story', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='music_story', to='bsn_social_network.story')),
            ],
        ),
        migrations.AddField(
            model_name='story',
            name='music',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='story_music', to='bsn_social_network.storymusic'),
        ),
        migrations.CreateModel(
            name='StoryPoll',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=255)),
                ('options', models.JSONField(default=list)),
                ('votes', models.JSONField(default=dict)),
                ('story', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='poll_story', to='bsn_social_network.story')),
            ],
        ),
        migrations.AddField(
            model_name='story',
            name='poll',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='story_poll', to='bsn_social_network.storypoll'),
        ),
        migrations.CreateModel(
            name='StoryReaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reaction_type', models.CharField(choices=[('emoji', 'Emoji'), ('text', 'Text')], default='emoji', max_length=20),),
                ('value', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('story', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reactions', to='bsn_social_network.story')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='story_reactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StoryReply',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('media_url', models.URLField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('story', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='bsn_social_network.story')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='story_replies', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StorySticker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sticker_url', models.URLField()),
                ('x', models.FloatField(default=0.5)),
                ('y', models.FloatField(default=0.5)),
                ('scale', models.FloatField(default=1.0)),
                ('rotation', models.FloatField(default=0.0)),
                ('story', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sticker_story', to='bsn_social_network.story')),
            ],
        ),
        migrations.AddField(
            model_name='story',
            name='stickers',
            field=models.ManyToManyField(blank=True, related_name='story_stickers', to='bsn_social_network.storysticker'),
        ),
        migrations.CreateModel(
            name='StoryView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('viewed_at', models.DateTimeField(auto_now_add=True)),
                ('story', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='views', to='bsn_social_network.story')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='story_views', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-viewed_at'],
            },
        ),
        migrations.CreateModel(
            name='TokenFactory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('symbol', models.CharField(max_length=10)),
                ('decimals', models.IntegerField(default=18)),
                ('total_supply', models.DecimalField(decimal_places=18, max_digits=36)),
                ('token_standard', models.CharField(choices=[('erc20', 'ERC-20'), ('erc721', 'ERC-721'), ('erc1155', 'ERC-1155'), ('other', 'Other')], max_length=10),),
                ('logo_url', models.URLField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('contract', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tokens', to='bsn_social_network.smartcontract')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'token_factory',
            },
        ),
        migrations.CreateModel(
            name='TokenStreaming',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_amount', models.DecimalField(decimal_places=8, max_digits=18)),
                ('amount_per_second', models.DecimalField(decimal_places=12, max_digits=18)),
                ('streamed_amount', models.DecimalField(decimal_places=8, default=0, max_digits=18)),
                ('status', models.CharField(choices=[('active', 'Active'), ('paused', 'Paused'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='active', max_length=10),),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('end_time', models.DateTimeField()),
                ('last_update_time', models.DateTimeField(auto_now=True)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='token_streams_received', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='token_streams_sent', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'token_streaming',
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unlocked_at', models.DateTimeField(auto_now_add=True)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_achievements', to='bsn_social_network.achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_achievement',
            },
        ),
        migrations.CreateModel(
            name='UserPrivacy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('show_email', models.BooleanField(default=False)),
                ('show_friends', models.BooleanField(default=True)),
                ('show_photos', models.BooleanField(default=True)),
                ('show_activity', models.BooleanField(default=True)),
                ('show_analytics', models.BooleanField(default=True)),
                ('show_social_links', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='privacy_settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_privacy',
            },
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('theme', models.CharField(default='light', max_length=10)),
                ('email_notifications', models.BooleanField(default=True)),
                ('push_notifications', models.BooleanField(default=True)),
                ('privacy_settings', models.JSONField(default=dict)),
                ('two_factor_auth_enabled', models.BooleanField(default=False)),
                ('auto_staking', models.BooleanField(default=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_settings',
            },
        ),
        migrations.CreateModel(
            name='VideoCall',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_id', models.CharField(max_length=100, unique=True)),
                ('status', models.CharField(choices=[('initiating', 'Initiating'), ('active', 'Active'), ('ended', 'Ended'), ('missed', 'Missed')], default='initiating', max_length=20),),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('duration', models.IntegerField(blank=True, null=True)),
                ('initiator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='initiated_calls', to=settings.AUTH_USER_MODEL)),
                ('participants', models.ManyToManyField(related_name='participated_calls', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'video_calls',
            },
        ),
        migrations.CreateModel(
            name='VideoCallParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('invited', 'Invited'), ('joined', 'Joined'), ('left', 'Left'), ('declined', 'Declined')], default='invited', max_length=20),),
                ('joined_at', models.DateTimeField(blank=True, null=True)),
                ('left_at', models.DateTimeField(blank=True, null=True)),
                ('call', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='call_participants', to='bsn_social_network.videocall')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='call_participations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'video_call_participants',
            },
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vote', models.CharField(choices=[('for', 'For'), ('against', 'Against'), ('abstain', 'Abstain')], max_length=10),),
                ('voting_power', models.DecimalField(decimal_places=2, max_digits=10),),
                ('reason', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='bsn_social_network.proposal')),
                ('voter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'vote',
            },
        ),
        migrations.CreateModel(
            name='Wallet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('balance', models.DecimalField(decimal_places=8, default=0, max_digits=18)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('private_key_encrypted', models.CharField(blank=True, max_length=512, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='wallet', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'wallet',
            },
        ),
        migrations.CreateModel(
            name='TokenTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_hash', models.CharField(default=bsn_social_network.models.generate_transaction_hash, max_length=64, unique=True)),
                ('amount', models.DecimalField(decimal_places=8, max_digits=18)),
                ('transaction_type', models.CharField(choices=[('transfer', 'Transfer'), ('mining_reward', 'Mining Reward'), ('staking_reward', 'Staking Reward'), ('achievement_reward', 'Achievement Reward'), ('purchase', 'Purchase'), ('system', 'System')], max_length=20),),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=10),),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('from_wallet', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sent_transactions', to='bsn_social_network.wallet')),
                ('to_wallet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_transactions', to='bsn_social_network.wallet')),
            ],
            options={
                'db_table': 'token_transaction',
            },
        ),
        migrations.AddConstraint(
            model_name='blockeduser',
            constraint=models.UniqueConstraint(fields=('user', 'blocked_user'), name='unique_blocked_user'),
        ),
        migrations.AddIndex(
            model_name='contentreport',
            index=models.Index(fields=['content_type', 'content_id'], name='content_rep_content_cbd883_idx'),
        ),
        migrations.AddIndex(
            model_name='contentreport',
            index=models.Index(fields=['status', 'created_at'], name='content_rep_status_6be47c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='conversationparticipant',
            unique_together={('conversation', 'user')},
        ),
        migrations.AddConstraint(
            model_name='daomembership',
            constraint=models.UniqueConstraint(fields=('dao', 'user'), name='unique_dao_membership'),
        ),
        migrations.AddConstraint(
            model_name='followrelationship',
            constraint=models.UniqueConstraint(fields=('user', 'friend'), name='unique_follow_relationship'),
        ),
        migrations.AddConstraint(
            model_name='friendship',
            constraint=models.UniqueConstraint(fields=('requester', 'receiver'), name='unique_friendship'),
        ),
        migrations.AddConstraint(
            model_name='groupmembership',
            constraint=models.UniqueConstraint(fields=('group', 'user'), name='unique_group_membership'),
        ),
        migrations.AddIndex(
            model_name='icotokenreservation',
            index=models.Index(fields=['user', 'status'], name='ico_token_r_user_id_06567a_idx'),
        ),
        migrations.AddIndex(
            model_name='icotokenreservation',
            index=models.Index(fields=['payment_method', 'status'], name='ico_token_r_payment_cd367e_idx'),
        ),
        migrations.AddIndex(
            model_name='icotokenreservation',
            index=models.Index(fields=['expires_at'], name='ico_token_r_expires_10de54_idx'),
        ),
        migrations.AddConstraint(
            model_name='message',
            constraint=models.CheckConstraint(check=models.Q(('receiver__isnull', False), ('group__isnull', False), ('conversation__isnull', False), _connector='OR'), name='message_has_target'),
        ),
        migrations.AlterUniqueTogether(
            name='messagereaction',
            unique_together={('message', 'user', 'reaction_type')},
        ),
        migrations.AlterUniqueTogether(
            name='messageread',
            unique_together={('message', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='photoalbum',
            unique_together={('user', 'name')},
        ),
        migrations.AddConstraint(
            model_name='like',
            constraint=models.CheckConstraint(check=models.Q(('post__isnull', False), ('comment__isnull', False), _connector='OR'), name='like_has_target'),
        ),
        migrations.AddConstraint(
            model_name='like',
            constraint=models.UniqueConstraint(condition=models.Q(('post__isnull', False)), fields=('user', 'post'), name='unique_post_like'),
        ),
        migrations.AddConstraint(
            model_name='like',
            constraint=models.UniqueConstraint(condition=models.Q(('comment__isnull', False)), fields=('user', 'comment'), name='unique_comment_like'),
        ),
        migrations.AlterUniqueTogether(
            name='bookmark',
            unique_together={('user', 'post')},
        ),
        migrations.AlterUniqueTogether(
            name='posthashtag',
            unique_together={('post', 'hashtag')},
        ),
        migrations.AddConstraint(
            model_name='referral',
            constraint=models.UniqueConstraint(fields=('referrer', 'referred'), name='unique_referral'),
        ),
        migrations.AlterUniqueTogether(
            name='storyreaction',
            unique_together={('story', 'user', 'reaction_type', 'value')},
        ),
        migrations.AlterUniqueTogether(
            name='storyview',
            unique_together={('story', 'user')},
        ),
        migrations.AddConstraint(
            model_name='userachievement',
            constraint=models.UniqueConstraint(fields=('user', 'achievement'), name='unique_user_achievement'),
        ),
        migrations.AlterUniqueTogether(
            name='videocallparticipant',
            unique_together={('call', 'user')},
        ),
        migrations.AddConstraint(
            model_name='vote',
            constraint=models.UniqueConstraint(fields=('proposal', 'voter'), name='unique_proposal_vote'),
        ),
    ]
