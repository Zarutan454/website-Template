
import { ethers } from 'ethers';
import { GasEstimate } from '../contracts/types';
import { TokenDeploymentConfig } from './TokenDeploymentService';

const standardTokenABI = [
  "function name() view returns (string)",
  "function symbol() view returns (string)",
  "function decimals() view returns (uint8)",
  "function totalSupply() view returns (uint256)",
  "function balanceOf(address) view returns (uint256)",
  "function transfer(address to, uint amount) returns (bool)"
];

const standardTokenBytecode = "0x608060405234801561001057600080fd5b50610771806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461015357806395d89b4114610183578063a457c2d714610161578063a9059cbb14610191578063dd62ed3e146101c1576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a575b600080fd5b6100b66101f1565b6040516100c39190610283565b60405180910390f35b6100e660048036038101906100e19190610215565b610283565b6040516100f39190610283565b60405180910390f35b6101046102a6565b6040516101119190610283565b60405180910390f35b6101326004803603810190610215565b6102b0565b005b61013c60048036038101906100e19190610215565b6102d1565b60405161014a9190610283565b60405180910390f35b61016c60048036038101906101679190610215565b6102f2565b60405161017a9190610283565b60405180910390f35b61018b61033a565b6040516101989190610283565b60405180910390f35b6101aa60048036038101906101a59190610215565b61034d565b6040516101b89190610283565b60405180910390f35b6101da60048036038101906101d59190610215565b61036e565b6040516101e89190610283565b60405180910390f35b60606000805461020090610283565b80601f016020809104026020016040519081016040528092919081815260200182805461022c90610283565b80156102795780601f1061024e57610100808354040283529160200191610279565b820191906000526020600020905b81548152906001019060200180831161025c57829003601f168201915b5050505050905090565b60008061028f83610283565b90506102a081858561034d565b600191505092915050565b6000600254905090565b6102bb8383836102d1565b6102c6838383610283565b505050565b60008061028f83610283565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461020090610283565b60008061028f83610283565b600080600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508281101561042e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042590610283565b60405180910390fd5b61043d8585858403610283565b600191505092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061047a8261044f565b9050919050565b61048a8161046f565b811461049557600080fd5b50565b6000813590506104a781610481565b92915050565b6000819050919050565b6104c0816104ad565b81146104cb57600080fd5b50565b6000813590506104dd816104b7565b92915050565b600080604083850312156104fa576104f961044a565b5b600061050885828601610498565b925050602061051985828601610498565b9150509250929050565b60008115159050919050565b61053881610523565b82525050565b6000602082019050610553600083018461052f565b92915050565b600080600060608486031215610572576105716104ad565b5b600061058086828701610498565b935050602061059186828701610498565b92505060406105a2868287016104ce565b9150509250925092565b600060208201905081810360008301526105c681610523565b9050919050565b6000602082840312156105e2576105e161044a565b5b60006105f084828501610498565b91505092915050565b6000602082019050610610600083018461052f565b92915050565b60006020828403121561062c5761062b61044a565b5b600061063a84828501610498565b91505092915050565b600082825260208201905092915050565b7f45524332303a207472616e7366657220616d6f756e7420657863656564732061600082015250565b600061068a602883610643565b915061069582610654565b604082019050919050565b600060208201905081810360008301526106b98161067d565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061071c602583610643565b9150610727826106c0565b604082019050919050565b6000602082019050818103600083015261074b8161070f565b905091905056fea2646970667358221220d7821cf3db5f4ec2c9e32a0a0ea09a7c8a292ee34d8ec3fd1b4e7cee3e6b255064736f6c63430008120033";

export const GasEstimationService = {
  estimateDeploymentGas: async (params: TokenDeploymentConfig): Promise<GasEstimate> => {
    try {
      const network = params.network.toLowerCase();
      let providerUrl = '';
      
      switch (network) {
        case 'ethereum':
          providerUrl = import.meta.env.VITE_ETHEREUM_RPC_URL || 'https://mainnet.infura.io/v3/your-api-key';
          break;
        case 'sepolia':
          providerUrl = import.meta.env.VITE_SEPOLIA_RPC_URL || 'https://sepolia.infura.io/v3/your-api-key';
          break;
        case 'arbitrum':
          providerUrl = import.meta.env.VITE_ARBITRUM_RPC_URL || 'https://arbitrum-mainnet.infura.io/v3/your-api-key';
          break;
        default:
          providerUrl = 'https://sepolia.infura.io/v3/your-api-key'; // Default to testnet
      }
      
      const provider = new ethers.JsonRpcProvider(providerUrl);
      
      const gasPrice = await provider.getFeeData();
      const gasPriceGwei = ethers.formatUnits(gasPrice.gasPrice || 0n, 'gwei');
      
      let gasLimit = "3500000"; // Base gas limit
      
      if (params.tokenType === 'business') {
        gasLimit = "4500000"; // Business tokens have more features
      } else if (params.tokenType === 'marketing') {
        gasLimit = "4000000"; // Marketing tokens have additional features
      }
      
      const totalCostEth = (parseInt(gasLimit) * parseFloat(gasPriceGwei) / 1e9).toFixed(6);
      
      let ethPriceUsd = 4000; // Default fallback price
      try {
        const response = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd');
        const data = await response.json();
        ethPriceUsd = data.ethereum?.usd || ethPriceUsd;
      } catch (error) {
        // Intentionally left empty: fallback to default ethPriceUsd if API fails
      }
      
      const totalCostUsd = (parseFloat(totalCostEth) * ethPriceUsd).toFixed(2);
      
      return {
        gasLimit,
        gasPriceGwei,
        totalCostEth,
        totalCostUsd,
        network: params.network
      };
    } catch (error) {
      console.error('Error estimating gas:', error);
      
      return {
        gasLimit: "4000000",
        gasPriceGwei: "50",
        totalCostEth: "0.2",
        totalCostUsd: "800",
        network: params.network
      };
    }
  }
};
