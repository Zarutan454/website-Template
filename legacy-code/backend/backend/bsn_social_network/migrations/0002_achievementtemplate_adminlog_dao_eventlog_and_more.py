# Generated by Django 5.1.7 on 2025-06-06 09:08

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('bsn_social_network', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AchievementTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('criteria', models.JSONField()),
                ('points', models.IntegerField(default=0)),
                ('token_reward', models.DecimalField(decimal_places=8, default=0, max_digits=18)),
                ('badge_image_url', models.URLField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'achievement_template',
            },
        ),
        migrations.CreateModel(
            name='AdminLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('create', 'Create'), ('update', 'Update'), ('delete', 'Delete'), ('suspend', 'Suspend'), ('unsuspend', 'Unsuspend'), ('other', 'Other')], max_length=10)),
                ('entity_type', models.CharField(max_length=50)),
                ('entity_id', models.IntegerField()),
                ('description', models.TextField()),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('admin', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='admin_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'admin_log',
            },
        ),
        migrations.CreateModel(
            name='DAO',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('governance_token', models.CharField(blank=True, max_length=255, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('suspended', 'Suspended'), ('archived', 'Archived')], default='active', max_length=10)),
                ('rules', models.JSONField(default=dict)),
                ('logo_url', models.URLField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_daos', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'dao',
            },
        ),
        migrations.CreateModel(
            name='EventLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(max_length=100)),
                ('level', models.CharField(choices=[('debug', 'Debug'), ('info', 'Info'), ('warning', 'Warning'), ('error', 'Error'), ('critical', 'Critical')], default='info', max_length=10)),
                ('message', models.TextField()),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='event_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'event_log',
            },
        ),
        migrations.CreateModel(
            name='InviteReward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reward_amount', models.DecimalField(decimal_places=8, max_digits=18)),
                ('is_claimed', models.BooleanField(default=False)),
                ('claimed_at', models.DateTimeField(blank=True, null=True)),
                ('invite', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='reward', to='bsn_social_network.invite')),
                ('inviter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invite_rewards', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'invite_reward',
            },
        ),
        migrations.CreateModel(
            name='MiningProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mining_power', models.DecimalField(decimal_places=2, default=1.0, max_digits=10)),
                ('last_claim_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('accumulated_tokens', models.DecimalField(decimal_places=8, default=0, max_digits=18)),
                ('total_mined', models.DecimalField(decimal_places=8, default=0, max_digits=18)),
                ('streak_days', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mining_progress', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'mining_progress',
            },
        ),
        migrations.CreateModel(
            name='NFT',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token_id', models.CharField(max_length=64, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('nft_type', models.CharField(choices=[('image', 'Image'), ('audio', 'Audio'), ('video', 'Video'), ('document', 'Document'), ('other', 'Other')], default='image', max_length=10)),
                ('media_url', models.URLField()),
                ('metadata', models.JSONField(default=dict)),
                ('rarity', models.CharField(choices=[('common', 'Common'), ('uncommon', 'Uncommon'), ('rare', 'Rare'), ('epic', 'Epic'), ('legendary', 'Legendary'), ('mythic', 'Mythic')], default='common', max_length=10)),
                ('is_locked', models.BooleanField(default=False)),
                ('transaction_hash', models.CharField(blank=True, max_length=64, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_nfts', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_nfts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'nft',
            },
        ),
        migrations.CreateModel(
            name='NotificationSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('likes', models.BooleanField(default=True)),
                ('comments', models.BooleanField(default=True)),
                ('friend_requests', models.BooleanField(default=True)),
                ('messages', models.BooleanField(default=True)),
                ('group_invites', models.BooleanField(default=True)),
                ('system_notifications', models.BooleanField(default=True)),
                ('token_transactions', models.BooleanField(default=True)),
                ('mining_rewards', models.BooleanField(default=True)),
                ('governance_alerts', models.BooleanField(default=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='notification_settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'notification_settings',
            },
        ),
        migrations.CreateModel(
            name='Proposal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('active', 'Active'), ('passed', 'Passed'), ('rejected', 'Rejected'), ('executed', 'Executed'), ('cancelled', 'Cancelled')], default='draft', max_length=10)),
                ('execution_script', models.JSONField(blank=True, default=dict)),
                ('quorum', models.IntegerField(default=0)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_proposals', to=settings.AUTH_USER_MODEL)),
                ('dao', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='proposals', to='bsn_social_network.dao')),
            ],
            options={
                'db_table': 'proposal',
            },
        ),
        migrations.CreateModel(
            name='SmartContract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('contract_type', models.CharField(choices=[('token', 'Token'), ('nft', 'NFT'), ('marketplace', 'Marketplace'), ('governance', 'Governance'), ('other', 'Other')], max_length=15)),
                ('address', models.CharField(max_length=255)),
                ('network', models.CharField(max_length=50)),
                ('abi', models.JSONField()),
                ('bytecode', models.TextField(blank=True, null=True)),
                ('source_code', models.TextField(blank=True, null=True)),
                ('transaction_hash', models.CharField(blank=True, max_length=66, null=True)),
                ('deployed_at', models.DateTimeField(auto_now_add=True)),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='deployed_contracts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'smart_contract',
            },
        ),
        migrations.CreateModel(
            name='Staking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=8, max_digits=18)),
                ('status', models.CharField(choices=[('active', 'Active'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='active', max_length=10)),
                ('staking_period', models.IntegerField()),
                ('apy_rate', models.DecimalField(decimal_places=2, max_digits=6)),
                ('rewards_earned', models.DecimalField(decimal_places=8, default=0, max_digits=18)),
                ('start_date', models.DateTimeField(auto_now_add=True)),
                ('end_date', models.DateTimeField()),
                ('last_reward_claim', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stakings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'staking',
            },
        ),
        migrations.CreateModel(
            name='TokenFactory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('symbol', models.CharField(max_length=10)),
                ('decimals', models.IntegerField(default=18)),
                ('total_supply', models.DecimalField(decimal_places=18, max_digits=36)),
                ('token_standard', models.CharField(choices=[('erc20', 'ERC-20'), ('erc721', 'ERC-721'), ('erc1155', 'ERC-1155'), ('other', 'Other')], max_length=10)),
                ('logo_url', models.URLField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('contract', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tokens', to='bsn_social_network.smartcontract')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'token_factory',
            },
        ),
        migrations.CreateModel(
            name='TokenStreaming',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_amount', models.DecimalField(decimal_places=8, max_digits=18)),
                ('amount_per_second', models.DecimalField(decimal_places=12, max_digits=18)),
                ('streamed_amount', models.DecimalField(decimal_places=8, default=0, max_digits=18)),
                ('status', models.CharField(choices=[('active', 'Active'), ('paused', 'Paused'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='active', max_length=10)),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('end_time', models.DateTimeField()),
                ('last_update_time', models.DateTimeField(auto_now=True)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='token_streams_received', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='token_streams_sent', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'token_streaming',
            },
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('theme', models.CharField(default='light', max_length=10)),
                ('email_notifications', models.BooleanField(default=True)),
                ('push_notifications', models.BooleanField(default=True)),
                ('privacy_settings', models.JSONField(default=dict)),
                ('two_factor_auth_enabled', models.BooleanField(default=False)),
                ('auto_staking', models.BooleanField(default=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_settings',
            },
        ),
        migrations.CreateModel(
            name='Wallet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('balance', models.DecimalField(decimal_places=8, default=0, max_digits=18)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('private_key_encrypted', models.CharField(blank=True, max_length=512, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='wallet', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'wallet',
            },
        ),
        migrations.CreateModel(
            name='TokenTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_hash', models.CharField(default=uuid.uuid4, max_length=64, unique=True)),
                ('amount', models.DecimalField(decimal_places=8, max_digits=18)),
                ('transaction_type', models.CharField(choices=[('transfer', 'Transfer'), ('mining_reward', 'Mining Reward'), ('staking_reward', 'Staking Reward'), ('achievement_reward', 'Achievement Reward'), ('purchase', 'Purchase'), ('system', 'System')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=10)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('from_wallet', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sent_transactions', to='bsn_social_network.wallet')),
                ('to_wallet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_transactions', to='bsn_social_network.wallet')),
            ],
            options={
                'db_table': 'token_transaction',
            },
        ),
        migrations.CreateModel(
            name='DAOMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('member', 'Member'), ('contributor', 'Contributor'), ('moderator', 'Moderator'), ('admin', 'Admin')], default='member', max_length=15)),
                ('voting_power', models.DecimalField(decimal_places=2, default=1.0, max_digits=10)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('dao', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='bsn_social_network.dao')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dao_memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'dao_membership',
                'constraints': [models.UniqueConstraint(fields=('dao', 'user'), name='unique_dao_membership')],
            },
        ),
        migrations.CreateModel(
            name='Referral',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reward_claimed', models.BooleanField(default=False)),
                ('reward_amount', models.DecimalField(decimal_places=8, default=0, max_digits=18)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('rewarded_at', models.DateTimeField(blank=True, null=True)),
                ('referred', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='referred_by', to=settings.AUTH_USER_MODEL)),
                ('referrer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='referred_users', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'referral',
                'constraints': [models.UniqueConstraint(fields=('referrer', 'referred'), name='unique_referral')],
            },
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vote', models.CharField(choices=[('for', 'For'), ('against', 'Against'), ('abstain', 'Abstain')], max_length=10)),
                ('voting_power', models.DecimalField(decimal_places=2, max_digits=10)),
                ('reason', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='bsn_social_network.proposal')),
                ('voter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'vote',
                'constraints': [models.UniqueConstraint(fields=('proposal', 'voter'), name='unique_proposal_vote')],
            },
        ),
    ]
