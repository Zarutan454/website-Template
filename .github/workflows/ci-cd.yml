name: BSN CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # üîí Security Scanning
  security-scan:
    name: Security & Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          pip install -r backend/requirements.txt
          pip install -r backend/requirements-dev.txt

      - name: Security audit (npm)
        run: npm audit --audit-level=high

      - name: Security audit (pip)
        run: |
          pip install safety
          safety check

      - name: Check for secrets
        run: |
          pip install detect-secrets
          detect-secrets scan --baseline .secrets.baseline

      - name: Lint frontend
        run: |
          npm run lint
          npm run type-check

      - name: Lint backend
        run: |
          cd backend
          python -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          python -m black . --check
          python -m isort . --check-only

  # üß™ Backend Testing
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run migrations
        run: |
          cd backend
          python manage.py migrate --run-syncdb

      - name: Run tests
        run: |
          cd backend
          python manage.py test --verbosity=2 --parallel=4

      - name: Run coverage
        run: |
          cd backend
          coverage run --source='.' manage.py test
          coverage report --fail-under=80
          coverage xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

      - name: Mining System Tests
        run: |
          cd backend
          python manage.py test bsn_social_network.tests.test_mining --verbosity=2
          python manage.py test bsn_social_network.tests.test_anti_fraud --verbosity=2

  # üß™ Frontend Testing
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit -- --coverage --watchAll=false

      - name: Run integration tests
        run: npm run test:integration

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # üèóÔ∏è Build
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [security-scan, backend-tests, frontend-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          pip install -r backend/requirements.txt

      - name: Build frontend
        run: npm run build

      - name: Build backend
        run: |
          cd backend
          python manage.py collectstatic --noinput

      - name: Build Docker images
        run: |
          docker build -t bsn-backend:latest ./backend
          docker build -t bsn-frontend:latest .

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            dist/
            backend/staticfiles/
            backend/media/

  # üöÄ Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging server
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: rsync, docker-compose, or cloud deployment

      - name: Run health checks
        run: |
          echo "Running health checks..."
          # Add health check commands

  # üöÄ Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production server
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here

      - name: Run health checks
        run: |
          echo "Running production health checks..."

      - name: Notify deployment
        run: |
          echo "Production deployment completed successfully!"

  # üìä Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun

  # üîç E2E Testing
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run E2E tests
        run: npm run test:e2e

  # üìà Monitoring
  monitoring:
    name: Monitoring Setup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Setup monitoring
        run: |
          echo "Setting up monitoring and alerts..."
          # Add monitoring setup commands

      - name: Configure alerts
        run: |
          echo "Configuring alerting rules..."
          # Add alert configuration

  # üîÑ Rollback (if needed)
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Rollback deployment
        run: |
          echo "Rolling back deployment due to failure..."
          # Add rollback commands

      - name: Notify rollback
        run: |
          echo "Deployment rolled back successfully!" 